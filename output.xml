<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2 (Python 3.7.7 on darwin)" generated="20200703 14:59:08.865" rpa="false">
<suite id="s1" name="Training" source="/Users/nattapol/Documents/side_project/INET/rest_api/testsuites/training.robot">
<kw name="Get Access Token" type="setup">
<arguments>
<arg>ABC</arg>
<arg>P@ssW@rd</arg>
<arg>200</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>token</arg>
</arguments>
<assign>
<var>${alias}</var>
</assign>
<msg timestamp="20200703 14:59:09.140" level="INFO">${alias} = token</msg>
<status status="PASS" starttime="20200703 14:59:09.140" endtime="20200703 14:59:09.140"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${backend_url}</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20200703 14:59:09.141" level="INFO">${url} = https://demo5460031.mockable.io</msg>
<status status="PASS" starttime="20200703 14:59:09.140" endtime="20200703 14:59:09.141"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${token_path}</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20200703 14:59:09.142" level="INFO">${path} = /token</msg>
<status status="PASS" starttime="20200703 14:59:09.141" endtime="20200703 14:59:09.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20200703 14:59:09.143" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200703 14:59:09.143" endtime="20200703 14:59:09.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${username}</arg>
<arg>password=${password}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20200703 14:59:09.144" level="INFO">${data} = {'username': 'ABC', 'password': 'P@ssW@rd'}</msg>
<status status="PASS" starttime="20200703 14:59:09.143" endtime="20200703 14:59:09.144"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${alias}</arg>
<arg>${url}</arg>
<arg>${headers}</arg>
<arg>verify=True</arg>
</arguments>
<msg timestamp="20200703 14:59:09.145" level="INFO">Creating Session using : alias=token, url=https://demo5460031.mockable.io, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200703 14:59:09.145" endtime="20200703 14:59:09.146"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${alias}</arg>
<arg>${path}</arg>
<arg>data=${data}</arg>
<arg>params=None</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200703 14:59:09.590" level="INFO">POST Request : url=https://demo5460031.mockable.io/token 
 path_url=/token 
 headers={'User-Agent': 'python-requests/2.23.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '43'} 
 body={"username": "ABC", "password": "P@ssW@rd"} 
 </msg>
<msg timestamp="20200703 14:59:09.591" level="INFO">POST Response : url=https://demo5460031.mockable.io/token 
 status=200, reason=OK 
 body={
    "result": {
       "access_token": "mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrwwxksyvimcmisfhhegagsxabspghqqkuivodowqcpyoaxvsuzfbsqwzhvd"
    }
} 
 </msg>
<msg timestamp="20200703 14:59:09.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200703 14:59:09.146" endtime="20200703 14:59:09.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${expected_resp_status}</arg>
<arg>${resp.status_code}</arg>
</arguments>
<msg timestamp="20200703 14:59:09.592" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20200703 14:59:09.591" endtime="20200703 14:59:09.592"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${request_json}</var>
</assign>
<msg timestamp="20200703 14:59:09.594" level="INFO">${request_json} = {'result': {'access_token': 'mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasm...</msg>
<status status="PASS" starttime="20200703 14:59:09.593" endtime="20200703 14:59:09.594"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${request_json}</arg>
</arguments>
<msg timestamp="20200703 14:59:09.594" level="INFO">{'result': {'access_token': 'mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrwwxksyvimcmisfhhegagsxabspghqqkuivodowqcpyoaxvsuzfbsqwzhvd'}}</msg>
<status status="PASS" starttime="20200703 14:59:09.594" endtime="20200703 14:59:09.594"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${request_json}[result][access_token]</arg>
</arguments>
<assign>
<var>${access_token}</var>
</assign>
<msg timestamp="20200703 14:59:09.596" level="INFO">${access_token} = mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrww...</msg>
<status status="PASS" starttime="20200703 14:59:09.595" endtime="20200703 14:59:09.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${access_token}</arg>
</arguments>
<msg timestamp="20200703 14:59:09.597" level="INFO">mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrwwxksyvimcmisfhhegagsxabspghqqkuivodowqcpyoaxvsuzfbsqwzhvd</msg>
<status status="PASS" starttime="20200703 14:59:09.596" endtime="20200703 14:59:09.597"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${access_token}</arg>
<arg>${access_token}</arg>
</arguments>
<msg timestamp="20200703 14:59:09.598" level="INFO">${access_token} = mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrww...</msg>
<status status="PASS" starttime="20200703 14:59:09.597" endtime="20200703 14:59:09.598"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:09.139" endtime="20200703 14:59:09.598"></status>
</kw>
<test id="s1-t1" name="TC01">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>=========== Test Data ===================</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:09.599" endtime="20200703 14:59:09.600"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>300</arg>
</arguments>
<assign>
<var>${price}</var>
</assign>
<msg timestamp="20200703 14:59:09.601" level="INFO">${price} = 300</msg>
<status status="PASS" starttime="20200703 14:59:09.600" endtime="20200703 14:59:09.601"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>100</arg>
</arguments>
<assign>
<var>${amount}</var>
</assign>
<msg timestamp="20200703 14:59:09.601" level="INFO">${amount} = 100</msg>
<status status="PASS" starttime="20200703 14:59:09.601" endtime="20200703 14:59:09.601"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>buy</arg>
</arguments>
<assign>
<var>${side}</var>
</assign>
<msg timestamp="20200703 14:59:09.602" level="INFO">${side} = buy</msg>
<status status="PASS" starttime="20200703 14:59:09.601" endtime="20200703 14:59:09.602"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>PTTBK</arg>
</arguments>
<assign>
<var>${symbol}</var>
</assign>
<msg timestamp="20200703 14:59:09.602" level="INFO">${symbol} = PTTBK</msg>
<status status="PASS" starttime="20200703 14:59:09.602" endtime="20200703 14:59:09.603"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>limit</arg>
</arguments>
<assign>
<var>${order_type}</var>
</assign>
<msg timestamp="20200703 14:59:09.603" level="INFO">${order_type} = limit</msg>
<status status="PASS" starttime="20200703 14:59:09.603" endtime="20200703 14:59:09.603"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>=========== Test step ===================</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:09.604" endtime="20200703 14:59:09.604"></status>
</kw>
<kw name="Create Orders payload">
<arguments>
<arg>${symbol}</arg>
<arg>${side}</arg>
<arg>${price}</arg>
<arg>${amount}</arg>
<arg>${order_type}</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${template_order_payload}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:09.608" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/nattapol/Documents/side_project/INET/rest_api/testdata/json/testdata_orders_api.json"&gt;/Users/nattapol/Documents/side_project/INET/rest_api/testdata/json/testdata_orders_api.json&lt;/a&gt;'.</msg>
<msg timestamp="20200703 14:59:09.609" level="INFO">${request_body} = {
  "symbol": "VAR_SYMBOL",
  "side": "VAR_SIDE",
  "price": "VAR_PRICE",
  "order_type": "VAR_ORDER_TYPE",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.607" endtime="20200703 14:59:09.609"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_SYMBOL</arg>
<arg>${market_symbol}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:09.611" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "VAR_SIDE",
  "price": "VAR_PRICE",
  "order_type": "VAR_ORDER_TYPE",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.610" endtime="20200703 14:59:09.611"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_SIDE</arg>
<arg>${side}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:09.612" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "buy",
  "price": "VAR_PRICE",
  "order_type": "VAR_ORDER_TYPE",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.611" endtime="20200703 14:59:09.612"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_PRICE</arg>
<arg>${price}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:09.613" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "buy",
  "price": "300",
  "order_type": "VAR_ORDER_TYPE",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.613" endtime="20200703 14:59:09.613"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_ORDER_TYPE</arg>
<arg>${order_type}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:09.614" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "buy",
  "price": "300",
  "order_type": "limit",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.613" endtime="20200703 14:59:09.614"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_AMOUNT</arg>
<arg>${amount}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:09.615" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "buy",
  "price": "300",
  "order_type": "limit",
  "amount": "100"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.614" endtime="20200703 14:59:09.615"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${request_body}</arg>
</arguments>
<msg timestamp="20200703 14:59:09.615" level="INFO">{
  "symbol": "PTTBK",
  "side": "buy",
  "price": "300",
  "order_type": "limit",
  "amount": "100"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.615" endtime="20200703 14:59:09.615"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>${request_body}</arg>
</arguments>
<msg timestamp="20200703 14:59:09.616" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "buy",
  "price": "300",
  "order_type": "limit",
  "amount": "100"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.615" endtime="20200703 14:59:09.616"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:09.604" endtime="20200703 14:59:09.616"></status>
</kw>
<kw name="Create Order API">
<arguments>
<arg>${order_path}</arg>
<arg>${access_token}</arg>
<arg>${request_body}</arg>
<arg>201</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>orders</arg>
</arguments>
<assign>
<var>${alias}</var>
</assign>
<msg timestamp="20200703 14:59:09.618" level="INFO">${alias} = orders</msg>
<status status="PASS" starttime="20200703 14:59:09.618" endtime="20200703 14:59:09.618"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${backend_url}</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20200703 14:59:09.619" level="INFO">${url} = https://demo5460031.mockable.io</msg>
<status status="PASS" starttime="20200703 14:59:09.618" endtime="20200703 14:59:09.619"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${order_path}</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20200703 14:59:09.620" level="INFO">${path} = /orders</msg>
<status status="PASS" starttime="20200703 14:59:09.619" endtime="20200703 14:59:09.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Authorization=bearer ${access_token}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20200703 14:59:09.621" level="INFO">${headers} = {'Content-Type': 'application/json', 'Authorization': 'bearer mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgd...</msg>
<status status="PASS" starttime="20200703 14:59:09.620" endtime="20200703 14:59:09.621"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${request_body}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20200703 14:59:09.621" level="INFO">${data} = {
  "symbol": "PTTBK",
  "side": "buy",
  "price": "300",
  "order_type": "limit",
  "amount": "100"
}
</msg>
<status status="PASS" starttime="20200703 14:59:09.621" endtime="20200703 14:59:09.621"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${alias}</arg>
<arg>${url}</arg>
<arg>${headers}</arg>
<arg>verify=True</arg>
</arguments>
<msg timestamp="20200703 14:59:09.622" level="INFO">Creating Session using : alias=orders, url=https://demo5460031.mockable.io, headers={'Content-Type': 'application/json', 'Authorization': 'bearer mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrwwxksyvimcmisfhhegagsxabspghqqkuivodowqcpyoaxvsuzfbsqwzhvd'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200703 14:59:09.622" endtime="20200703 14:59:09.623"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${alias}</arg>
<arg>${path}</arg>
<arg>data=${data}</arg>
<arg>params=None</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200703 14:59:10.085" level="INFO">POST Request : url=https://demo5460031.mockable.io/orders 
 path_url=/orders 
 headers={'User-Agent': 'python-requests/2.23.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'bearer mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrwwxksyvimcmisfhhegagsxabspghqqkuivodowqcpyoaxvsuzfbsqwzhvd', 'Content-Length': '103'} 
 body=b'{\n  "symbol": "PTTBK",\n  "side": "buy",\n  "price": "300",\n  "order_type": "limit",\n  "amount": "100"\n}\n' 
 </msg>
<msg timestamp="20200703 14:59:10.085" level="INFO">POST Response : url=https://demo5460031.mockable.io/orders 
 status=201, reason=Created 
 body={
  "result": {
    "message": "successful"
  }
}
 
 </msg>
<msg timestamp="20200703 14:59:10.086" level="INFO">${resp} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20200703 14:59:09.623" endtime="20200703 14:59:10.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${expected_response}</arg>
<arg>${resp.status_code}</arg>
</arguments>
<msg timestamp="20200703 14:59:10.087" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20200703 14:59:10.086" endtime="20200703 14:59:10.088"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${request_json}</var>
</assign>
<msg timestamp="20200703 14:59:10.089" level="INFO">${request_json} = {'result': {'message': 'successful'}}</msg>
<status status="PASS" starttime="20200703 14:59:10.088" endtime="20200703 14:59:10.089"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${request_json}</arg>
</arguments>
<msg timestamp="20200703 14:59:10.090" level="INFO">{'result': {'message': 'successful'}}</msg>
<status status="PASS" starttime="20200703 14:59:10.089" endtime="20200703 14:59:10.090"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request_json}</arg>
<arg>${request_json}</arg>
</arguments>
<msg timestamp="20200703 14:59:10.091" level="INFO">${request_json} = {'result': {'message': 'successful'}}</msg>
<status status="PASS" starttime="20200703 14:59:10.090" endtime="20200703 14:59:10.091"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:09.616" endtime="20200703 14:59:10.091"></status>
</kw>
<kw name="Validate Response Message">
<arguments>
<arg>201</arg>
<arg>successful</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='200'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[msg]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:10.093" endtime="20200703 14:59:10.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='201'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[result][message]'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[result][message]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:10.106" endtime="20200703 14:59:10.109"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:10.096" endtime="20200703 14:59:10.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='400'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[error][message]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:10.109" endtime="20200703 14:59:10.112"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:10.092" endtime="20200703 14:59:10.112"></status>
</kw>
<doc>Ensure that user can create the orders successfully
- Expected response code = 201 Created</doc>
<status status="PASS" starttime="20200703 14:59:09.598" endtime="20200703 14:59:10.113" critical="yes"></status>
</test>
<test id="s1-t2" name="TC02">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>=========== Test Data ===================</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:10.119" endtime="20200703 14:59:10.120"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>300</arg>
</arguments>
<assign>
<var>${price}</var>
</assign>
<msg timestamp="20200703 14:59:10.121" level="INFO">${price} = 300</msg>
<status status="PASS" starttime="20200703 14:59:10.120" endtime="20200703 14:59:10.121"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>100</arg>
</arguments>
<assign>
<var>${amount}</var>
</assign>
<msg timestamp="20200703 14:59:10.129" level="INFO">${amount} = 100</msg>
<status status="PASS" starttime="20200703 14:59:10.122" endtime="20200703 14:59:10.129"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sell</arg>
</arguments>
<assign>
<var>${side}</var>
</assign>
<msg timestamp="20200703 14:59:10.131" level="INFO">${side} = sell</msg>
<status status="PASS" starttime="20200703 14:59:10.130" endtime="20200703 14:59:10.131"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>PTTBK</arg>
</arguments>
<assign>
<var>${symbol}</var>
</assign>
<msg timestamp="20200703 14:59:10.133" level="INFO">${symbol} = PTTBK</msg>
<status status="PASS" starttime="20200703 14:59:10.131" endtime="20200703 14:59:10.133"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>limit</arg>
</arguments>
<assign>
<var>${order_type}</var>
</assign>
<msg timestamp="20200703 14:59:10.136" level="INFO">${order_type} = limit</msg>
<status status="PASS" starttime="20200703 14:59:10.135" endtime="20200703 14:59:10.136"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>=========== Test step ===================</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:10.137" endtime="20200703 14:59:10.138"></status>
</kw>
<kw name="Create Orders payload">
<arguments>
<arg>${symbol}</arg>
<arg>${side}</arg>
<arg>${price}</arg>
<arg>${amount}</arg>
<arg>${order_type}</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${template_order_payload}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:10.161" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/nattapol/Documents/side_project/INET/rest_api/testdata/json/testdata_orders_api.json"&gt;/Users/nattapol/Documents/side_project/INET/rest_api/testdata/json/testdata_orders_api.json&lt;/a&gt;'.</msg>
<msg timestamp="20200703 14:59:10.163" level="INFO">${request_body} = {
  "symbol": "VAR_SYMBOL",
  "side": "VAR_SIDE",
  "price": "VAR_PRICE",
  "order_type": "VAR_ORDER_TYPE",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.160" endtime="20200703 14:59:10.163"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_SYMBOL</arg>
<arg>${market_symbol}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:10.166" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "VAR_SIDE",
  "price": "VAR_PRICE",
  "order_type": "VAR_ORDER_TYPE",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.164" endtime="20200703 14:59:10.166"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_SIDE</arg>
<arg>${side}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:10.175" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "sell",
  "price": "VAR_PRICE",
  "order_type": "VAR_ORDER_TYPE",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.167" endtime="20200703 14:59:10.175"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_PRICE</arg>
<arg>${price}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:10.178" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "sell",
  "price": "300",
  "order_type": "VAR_ORDER_TYPE",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.175" endtime="20200703 14:59:10.179"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_ORDER_TYPE</arg>
<arg>${order_type}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:10.261" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "sell",
  "price": "300",
  "order_type": "limit",
  "amount": "VAR_AMOUNT"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.179" endtime="20200703 14:59:10.265"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>VAR_AMOUNT</arg>
<arg>${amount}</arg>
</arguments>
<assign>
<var>${request_body}</var>
</assign>
<msg timestamp="20200703 14:59:10.302" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "sell",
  "price": "300",
  "order_type": "limit",
  "amount": "100"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.279" endtime="20200703 14:59:10.303"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${request_body}</arg>
</arguments>
<msg timestamp="20200703 14:59:10.304" level="INFO">{
  "symbol": "PTTBK",
  "side": "sell",
  "price": "300",
  "order_type": "limit",
  "amount": "100"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.303" endtime="20200703 14:59:10.304"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request_body}</arg>
<arg>${request_body}</arg>
</arguments>
<msg timestamp="20200703 14:59:10.311" level="INFO">${request_body} = {
  "symbol": "PTTBK",
  "side": "sell",
  "price": "300",
  "order_type": "limit",
  "amount": "100"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.305" endtime="20200703 14:59:10.311"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:10.138" endtime="20200703 14:59:10.311"></status>
</kw>
<kw name="Create Order API">
<arguments>
<arg>${order_failed_path}</arg>
<arg>${access_token}</arg>
<arg>${request_body}</arg>
<arg>400</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>orders</arg>
</arguments>
<assign>
<var>${alias}</var>
</assign>
<msg timestamp="20200703 14:59:10.313" level="INFO">${alias} = orders</msg>
<status status="PASS" starttime="20200703 14:59:10.312" endtime="20200703 14:59:10.313"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${backend_url}</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20200703 14:59:10.313" level="INFO">${url} = https://demo5460031.mockable.io</msg>
<status status="PASS" starttime="20200703 14:59:10.313" endtime="20200703 14:59:10.313"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${order_path}</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20200703 14:59:10.314" level="INFO">${path} = /orders/failed</msg>
<status status="PASS" starttime="20200703 14:59:10.314" endtime="20200703 14:59:10.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
<arg>Authorization=bearer ${access_token}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20200703 14:59:10.315" level="INFO">${headers} = {'Content-Type': 'application/json', 'Authorization': 'bearer mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgd...</msg>
<status status="PASS" starttime="20200703 14:59:10.314" endtime="20200703 14:59:10.315"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${request_body}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20200703 14:59:10.316" level="INFO">${data} = {
  "symbol": "PTTBK",
  "side": "sell",
  "price": "300",
  "order_type": "limit",
  "amount": "100"
}
</msg>
<status status="PASS" starttime="20200703 14:59:10.315" endtime="20200703 14:59:10.316"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${alias}</arg>
<arg>${url}</arg>
<arg>${headers}</arg>
<arg>verify=True</arg>
</arguments>
<msg timestamp="20200703 14:59:10.349" level="INFO">Creating Session using : alias=orders, url=https://demo5460031.mockable.io, headers={'Content-Type': 'application/json', 'Authorization': 'bearer mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrwwxksyvimcmisfhhegagsxabspghqqkuivodowqcpyoaxvsuzfbsqwzhvd'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200703 14:59:10.347" endtime="20200703 14:59:10.349"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${alias}</arg>
<arg>${path}</arg>
<arg>data=${data}</arg>
<arg>params=None</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200703 14:59:10.874" level="INFO">POST Request : url=https://demo5460031.mockable.io/orders/failed 
 path_url=/orders/failed 
 headers={'User-Agent': 'python-requests/2.23.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'bearer mszqnwassgwimobyblvupthuslsrjsjjxuzwugbcdedljxhwfxqjbmrivnyujtwkedhwstjwagtzvyydgsvtcokkhmfrctvysbkoprlfujvgzybqwlknjdrcjlpcllututofpjekgdstypaxiyiwcekzgbjnqvbfyakypbcaasmasoaxvzntihudltqpidohfjdktrwwxksyvimcmisfhhegagsxabspghqqkuivodowqcpyoaxvsuzfbsqwzhvd', 'Content-Length': '104'} 
 body=b'{\n  "symbol": "PTTBK",\n  "side": "sell",\n  "price": "300",\n  "order_type": "limit",\n  "amount": "100"\n}\n' 
 </msg>
<msg timestamp="20200703 14:59:10.874" level="INFO">POST Response : url=https://demo5460031.mockable.io/orders/failed 
 status=400, reason=Bad Request 
 body={
  "error": {
    "message": "Price has too many decimal places"
  }
}
 
 </msg>
<msg timestamp="20200703 14:59:10.874" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200703 14:59:10.350" endtime="20200703 14:59:10.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${expected_response}</arg>
<arg>${resp.status_code}</arg>
</arguments>
<msg timestamp="20200703 14:59:10.875" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20200703 14:59:10.874" endtime="20200703 14:59:10.875"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${request_json}</var>
</assign>
<msg timestamp="20200703 14:59:10.876" level="INFO">${request_json} = {'error': {'message': 'Price has too many decimal places'}}</msg>
<status status="PASS" starttime="20200703 14:59:10.875" endtime="20200703 14:59:10.876"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${request_json}</arg>
</arguments>
<msg timestamp="20200703 14:59:10.876" level="INFO">{'error': {'message': 'Price has too many decimal places'}}</msg>
<status status="PASS" starttime="20200703 14:59:10.876" endtime="20200703 14:59:10.876"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request_json}</arg>
<arg>${request_json}</arg>
</arguments>
<msg timestamp="20200703 14:59:10.877" level="INFO">${request_json} = {'error': {'message': 'Price has too many decimal places'}}</msg>
<status status="PASS" starttime="20200703 14:59:10.877" endtime="20200703 14:59:10.877"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:10.311" endtime="20200703 14:59:10.877"></status>
</kw>
<kw name="Validate Response Message">
<arguments>
<arg>400</arg>
<arg>Price has too many decimal places</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='200'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[msg]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:10.880" endtime="20200703 14:59:10.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='201'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[result][message]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:10.881" endtime="20200703 14:59:10.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='400'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[error][message]'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[error][message]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:10.884" endtime="20200703 14:59:10.885"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:10.883" endtime="20200703 14:59:10.885"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:10.879" endtime="20200703 14:59:10.885"></status>
</kw>
<doc>Ensure that user can create the orders successfully
- Expected response code = 201 Created</doc>
<status status="PASS" starttime="20200703 14:59:10.114" endtime="20200703 14:59:10.886" critical="yes"></status>
</test>
<test id="s1-t3" name="TC03">
<kw name="Get Order API">
<arguments>
<arg>${test_path}</arg>
<arg>200</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>test</arg>
</arguments>
<assign>
<var>${alias}</var>
</assign>
<msg timestamp="20200703 14:59:10.890" level="INFO">${alias} = test</msg>
<status status="PASS" starttime="20200703 14:59:10.890" endtime="20200703 14:59:10.891"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${backend_url}</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20200703 14:59:10.891" level="INFO">${url} = https://demo5460031.mockable.io</msg>
<status status="PASS" starttime="20200703 14:59:10.891" endtime="20200703 14:59:10.891"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${test_path}</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20200703 14:59:10.892" level="INFO">${path} = /test</msg>
<status status="PASS" starttime="20200703 14:59:10.891" endtime="20200703 14:59:10.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20200703 14:59:10.894" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20200703 14:59:10.893" endtime="20200703 14:59:10.894"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>${alias}</arg>
<arg>${url}</arg>
<arg>${headers}</arg>
<arg>verify=True</arg>
</arguments>
<msg timestamp="20200703 14:59:10.896" level="INFO">Creating Session using : alias=test, url=https://demo5460031.mockable.io, headers={'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200703 14:59:10.895" endtime="20200703 14:59:10.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>${alias}</arg>
<arg>${path}</arg>
<arg>data=None</arg>
<arg>params=None</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200703 14:59:11.321" level="INFO">GET Request : url=https://demo5460031.mockable.io/test 
 path_url=/test 
 headers={'User-Agent': 'python-requests/2.23.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
 body=None 
 </msg>
<msg timestamp="20200703 14:59:11.321" level="INFO">GET Response : url=https://demo5460031.mockable.io/test 
 status=200, reason=OK 
 body={
 "msg": "Hello World."
} 
 </msg>
<msg timestamp="20200703 14:59:11.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200703 14:59:10.900" endtime="20200703 14:59:11.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${expected_resp_status}</arg>
<arg>${resp.status_code}</arg>
</arguments>
<msg timestamp="20200703 14:59:11.322" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20200703 14:59:11.322" endtime="20200703 14:59:11.322"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${request_json}</var>
</assign>
<msg timestamp="20200703 14:59:11.323" level="INFO">${request_json} = {'msg': 'Hello World.'}</msg>
<status status="PASS" starttime="20200703 14:59:11.322" endtime="20200703 14:59:11.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${request_json}</arg>
</arguments>
<msg timestamp="20200703 14:59:11.323" level="INFO">{'msg': 'Hello World.'}</msg>
<status status="PASS" starttime="20200703 14:59:11.323" endtime="20200703 14:59:11.323"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request_json}</arg>
<arg>${request_json}</arg>
</arguments>
<msg timestamp="20200703 14:59:11.324" level="INFO">${request_json} = {'msg': 'Hello World.'}</msg>
<status status="PASS" starttime="20200703 14:59:11.324" endtime="20200703 14:59:11.324"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:10.889" endtime="20200703 14:59:11.325"></status>
</kw>
<kw name="Validate Response Message">
<arguments>
<arg>200</arg>
<arg>Hello World.</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='200'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[msg]'</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[msg]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:11.328" endtime="20200703 14:59:11.328"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:11.327" endtime="20200703 14:59:11.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='201'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[result][message]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:11.329" endtime="20200703 14:59:11.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${expected_resp_status}'=='400'</arg>
<arg>Should Be Equal</arg>
<arg>'${expected_resp_message}'</arg>
<arg>'${request_json}[error][message]'</arg>
</arguments>
<status status="PASS" starttime="20200703 14:59:11.330" endtime="20200703 14:59:11.330"></status>
</kw>
<status status="PASS" starttime="20200703 14:59:11.326" endtime="20200703 14:59:11.330"></status>
</kw>
<tags>
<tag>test</tag>
</tags>
<status status="PASS" starttime="20200703 14:59:10.887" endtime="20200703 14:59:11.331" critical="yes"></status>
</test>
<status status="PASS" starttime="20200703 14:59:08.871" endtime="20200703 14:59:11.334"></status>
</suite>
<statistics>
<total>
<stat pass="3" fail="0">Critical Tests</stat>
<stat pass="3" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">test</stat>
</tag>
<suite>
<stat pass="3" fail="0" id="s1" name="Training">Training</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
